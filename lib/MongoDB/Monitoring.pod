#  Copyright 2018 - present MongoDB, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# PODNAME: MongoDB::Monitoring
# ABSTRACT: Internal event monitoring API for instrumentation

=pod

=encoding UTF-8

=head1 DESCRIPTION

The L<MongoDB::MongoClient> takes an optional C<monitoring_callback>
attribute, which can be used to monitor events that occur during the
operation of the driver.

The API is very simple: given a code reference, a hashref for each event
is passed to the code reference.  Here is a simple example that just
accumulates events in an array:

    our @events;
    my $cb = sub { push @events, $_[0] };

    MongoDB->connect( $uri, { monitoring_callback => $cb } );

=head1 EVENT TYPES

Every event is a hash reference, with a C<type> field indicating the type,
e.g. C<command_started>.  Each type is described below.

=head2 Command Monitoring

These events are fired for commands directly to the wire and the response.

=head3 command_started

This event is sent just before a command is put one the wire.  It will be
followed by either a C<command_succeeded> or C<command_failed> event.

Fields:

=for :list
* type: "command_started"
* databaseName: the name of the database to which the command applies
* commandName: the name of the command being executed; for legacy operations
  that don't use commands, the driver will convert them to appear as if
  they are in command form.
* command: a hash reference representing the full command to be sent
* requestId: the request identifier sent to the server
* connectionId: address and port of the destination server

=head3 command_succeeded

This event is sent just after a command reply is received, but only if the
database reply document contains a non-false C<ok> field.  NOTE: write
errors will have C<ok:1> even though they have write errors; for writes,
success indicates that the write attempt was valid, not that the write
succeeded.

Fields:

=for :list
* type: "command_succeeded"
* commandName: the name of the command being executed
* durationSecs: the elapsed time in seconds since the C<command_started>
  event.
* reply: a hash reference representing the full database reply
* requestId: the request identifier sent to the server
* connectionId: address and port of the destination server

=head3 command_failed

This event is sent just after a command reply is received, but only if the
database reply document contains a false C<ok> field or if an exception
occurred during send or receive operations.

Fields:

=for :list
* type: "command_failed"
* commandName: the name of the command being executed
* durationSecs: the elapsed time in seconds since the C<command_started>
  event.
* failure: a string with a error message about the failure
* eval_error: if an exception occurs, this contains the value of C<$@>
  when the exception was caught
* reply: a hash reference representing the full database reply or an empty
  hashref if the failure is due to an exception
* requestId: the request identifier sent to the server
* connectionId: address and port of the destination server

=head2 Server Discovery and Monitoring

These events are fired when servers and topology are amended.

=head3 server_opening_event

This event is sent when a new server is added to the topology.

Fields:

=for :list
* type: "server_opening_event"
* topologyId: The topology refaddr
* address: address of the server

=head3 server_closed_event

This event is sent when a server is removed from the topology.

Fields:

=for :list
* type: "server_closed_event"
* topologyId: The topology refaddr
* address: address of the server

=head3 server_description_changed_event

This event is sent when the server description changes, but does not include
changes to the RTT.

Fields:

=for :list
* type: "server_description_changed_event"
* address: address of the server
* topologyId: The topology refaddr
* previousDescription: Server Description before the change
* newDescription: Server Description after the change

=head3 topology_opening_event

This event is sent when the topology is created.

Fields:

=for :list
* type: "topology_opening_event"
* topologyId: The topology refaddr

=head3 topology_closed_event

This event is sent when the topology is closed.

Fields:

=for :list
* type: "topology_closed_event"
* topologyId: The topology refaddr

=head3 topology_description_changed_event

This event is sent when the topology description changes.

Fields:

=for :list
* type: "topology_description_changed_event"
* topologyId: The topology refaddr
* previousDescription: Topology Description before the change
* newDescription: Topology Description after the change

=head3 server_heartbeat_started_event

This event is sent before the ismaster command is sent to the server.

Fields:

=for :list
* type: "server_heartbeat_started_event"
* connectionId: address of the link to connect to

=head3 server_heartbeat_succeeded_event

This event is sent after the reply from the ismaster command arrives from a
successful reply.

Fields:

=for :list
* type: "server_heartbeat_succeeded_event"
* duration: time it took to send and receive a reply
* reply: the ismaster command reply
* connectionId: address of the server

=head3 server_heartbeat_failed_event

This event is sent if there is a failure from the ismaster command, which returns
an error string of some sort.

Fields:

=for :list
* type: "server_heartbeat_failed_event"
* duration: time it took to send and receive a reply
* failure: Returns an error string of the failure
* connectionId: address of the server

=head1 REDACTION

Certain commands are considered sensitive.  When any of the following
commands are seen in monitoring, the command body and database reply body
are replaced with an empty document:

=for :list
* authenticate
* saslStart
* saslContinue
* getnonce
* createUser
* updateUser
* copydbgetnonce
* copydbsaslstart

=cut

# vim: set ts=4 sts=4 sw=4 et tw=75:
